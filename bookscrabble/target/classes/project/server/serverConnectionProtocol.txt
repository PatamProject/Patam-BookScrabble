*This file is used to track the connection protocol with the server and which methods
are used for each call*

How is the protocol built:
We send a string between the host and the server, the string is seperated by '&' 
The first part is called the 'ID' and the second part of the string is called the 'body'.
The ServerManager will receive the message, split the message by '&' and check if the sender's ID is authorized and does he have a dedicated GameServer.
Unauthorised users will be ignored, authorized users will either reveive a new GameServer or be directed to one.
ID's a kept in a HashMap with the key being the ID and the value being the GameServer.

Server-side Protocol:
ID-
The unique ID of the sender.
....

Body-
The message itself. The body is split by ',' and each part is called an argument.
Arguments are read in the ServerManager and routed to the correct port based on the ID and type of request.
Types of arguments: (Return values are in brackets)
"1" - Traffic related to client-server communications
    - "N" : Host wants to connect to a Game server. (Ack)
    - "R" : Host wants to restart the Game server. (Ack)
    - "D" : Host disconnected/ended the game. (void)
    - "E" : Host wants to end the game. Returns the winner (String)

"2" - Traffic related to GameHandler such as creating and manipulating objects 
    - "G,N" : Create new Game objects (Ack)
    - "G,S" : Start the game and creates a Rack object to all players and sends
              the tiles taken for each player. (String)
    Related to Player objects:
    - "P,N,'name'" : New Player object with name 'name'. (Ack)
    - "P,S,'name'" : Returns the score player 'name'. (String)
    - "P,T,'name'" : Returns the tiles of the player 'name' (String)
    - "P,W,'name','string'" : Player 'name' tries to play a word on board (String) ('string' contains 'word-row-col-isVertical')
    - "P,L,'name'" : Player 'name' has left the game/disconnected. (Ack)
    Related to Tile objects:
    - "T,'name'" : Player 'name' takes a tile from bag (String)    

"3" - Traffic related to BookScrabbleHandler for quary and challenge
    - "Q,'string'" : Quary 'string' in the dictionary. (True/False)
    - "C,'string'" : Challenge 'string' in the dictionary. (True/False)

example:
"3,Q,banana" ---> "3" means BookScrabbleHandler, "Q" means quary() function to check the word
in the DictionaryManager and "banana" is the word itself. 

Host()<-------------------------------------->Server()
"1,N"--->New GameServer--->ServerManager
"1,R"--->Restart GameServer--->ServerManager
"1,D"--->Disconnect--->ServerManager
"1,E"--->End Game--->ServerManager
"2,G,N"--->New Game--->GameHandler.createGame()--->Return T/F
"2,G,S"--->Start Game--->GameHandler.createGame()--->Return String--->"'p1Name,TWLRPTS,'p2Name,DFKJIIR,..."
"2,P,N,'name'"--->New Player--->GameHandler.game.addNewPlayer('name')--->Returns T/F
"2,P,S,'name'"--->Get Player score--->GameHandler.game.players.getScore()--->Returns String--->"54"
"2,P,T,'name'"--->Get Player tiles--->GameHandler.game.players.rack.getTiles()--->Returns String--->"ACDDWPZ"
"2,P,W,'name','word-row-col-isVertical'"--->Player places word--->GameHandler.game.tryPlaceWord('string')--->Returns String of score--->"14" ('0' for invalid)
"2,P,L,'name'"--->Player Left--->GameHandler.game.playerLeftGame('name')--->Returns string of who left
"2,T,'name'"--->Player takes tile--->GameHandler.game.players.rack.takeTile()--->Returns String of tile--->"B" ('0' for empty bag (end of game))
"3,Q,'string'"--->BookScrabbleHandler.quary('string')--->Returns T/F
"3,C,'string'"--->BookScrabbleHandler.challenge('string')--->Returns T/F

Client-side Protocol:
The way a message is sent to the client/host.
A response from the server contains a response code and the body of the response if exists seperated by ','.

Response codes:
100 - OK, 'body' (Ack)
200 - Unknown command
300 - Missing arguments 
301 - Invalid arguments , 'arg index'
400 - Server error
500 - Access denied
600 - Game ended, 'body (winner)'