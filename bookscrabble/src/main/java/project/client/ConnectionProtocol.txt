*This file is used to track the connection protocol with the server and which methods
are used for each call*

How is the protocol built:
We send a string between the host and the server, the string is seperated by '&' 
The first part is the name of the sender and the second part is called the 'body'.
The Host will receive the message, split the message by '&', add the name of the sender to the list of players 
and pass the rest of the message to the GameHandler class.

Client to host protocol:
Body:
The message itself. The body is split by ':' to two parts, the command and the arguments for the command.
Arguments are read in the ----- ........ //example : "'senderName'&'takeTile':'Y'"
Types of commands and their arguments: 
"join:'name'" - Join a game - game.addNewPlayer(name)
"leave:'name'" - Leave a game - game.removePlayer(name)



"0" - Tell host you are disconnecting from the host. 
"1" - Ask host to join a game. If accepted host will return info about the game (Under Host to client protocol)
"2,word,row,col,isVertical" - Client wants to play a word on the board. (String) (Returns the score of the word and the tiles to take)
"3" - Skip turn. Returns a random tile from the bag. (String)
"S" - Start the game. (void) (Only Host can start the game)
"Q,'word'" - Quary 'word' in the dictionary. (True/False)
"C,'word'" - Challenge 'word' in the dictionary. (True/False)

How each request is handled:
Client()--->--->--->--->--->--->--->--->--->--->--->--->--->Host()
"0"--->Disconnect--->
"1"--->Join Game--->
"2"--->Play Word--->
"3"--->Skip Turn--->
"S"--->Start Game--->
"Q"--->Quary--->
"C"--->Challenge--->

Host to client protocol:
"0" - Host rejected the connection.
"1,'name1','name2',name3'" - Host accepted the connection. All players in the game are listed.
"2,score,tiles" - Host accepted the word and returns the score of the word and tiles to take. (If the score is 0 the word was not accpeted)
"3,'tile'" - Host returns the tile to the player. (If the tile is 0 the bag is empty)
"G" - Updates from the host regarding game state to ALL players:
    - "S,'name1-tiles','name2-tiles','name3-tiles'" - Game started. Handed tiles to each player by play order.
    - "P,N,'name'" : New player joined the game.
    - "P,L,'name'" : Player left the game.
    - "P,W,'name','score','tilesTaken','word-row-col-isVertical'" : Player 'name' score was updated to 'score' and took 'tilesTaken' from bag. Word info is sent to place on board. Next turn by play order.
    - "N,'name','tile'" - Player didn't place a word and took 'tile' from bag. Next turn by play order. 
"C,True/False,'score','tiles'" - Host returns the result of the challenge. (True/False) Score and tiles are sent if true.
"Q,True/False,'score','tiles'" - Host returns the result of the quary. (True/False) Score and tiles are sent if true.
"E,'name'" - Game Ended! Returns the winner of the game. (String)

How each request is handled:
Host()--->--->--->--->--->--->--->--->--->--->--->--->--->Client()
"0"--->Reject Connection--->
"1"--->Accept Connection--->
"2"--->Accept Word--->
"3"--->Accept Skip--->
"G,S..."--->Game Started--->
"G,P,N..."--->New Player--->
"G,P,L..."--->Player Left--->
"G,P,S..."--->Player Score--->
"G,N..."--->Player Took Tile--->
"G,E..."--->Game Ended--->
"C"--->Challenge--->
"Q"--->Quary--->

Error codes:
200 - Unknown command
300 - Invalid command
400 - Missing arguments 
500 - Server error
600 - Access denied